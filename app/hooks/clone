#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Generali AG, Rene Fuehrer <rene.fuehrer@generali.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
import logging
import time
import sys
from sys import stderr
import json
from json import loads
import git

# ------------------------------- CONFIG SECTION - DO NOT EDIT AVOVE THIS LINE -------------------------------

debug_level = "INFO"
config_file = "clone.json"
config_context = "clone"

# ------------------------------- CONFIG SECTION - DO NOT EDIT BELOW THIS LINE -------------------------------

logging.basicConfig(stream=stderr, level=logging.INFO)

mypath = os.path.dirname(os.path.realpath(sys.argv[0]))
timestamp = time.strftime("%Y%m%d-%H%M%S")

try:
    json_file = sys.argv[1]
    event_type = sys.argv[2]
    # the function 'hook_functions' is available from the main genvoy repository (https://github.com/generaliinformatik/genvoy)
    from hook_functions import replace_all_placeholders
except Exception:
    logging.error("Required parameters missing. Nothing to do.")
    sys.exit(0)

config_file_plain = os.path.splitext(os.path.basename(__file__))[0]
config_file = mypath + "/" + config_file_plain + ".json"

# config_file = mypath + '/' + config_file
# alternativly you can use 'eventy_type`als a dynamic variable to read configuration settings, e.g.:
#   config_file = mypath + '/'+event_type+'.json'
# or
#   config_file_prefix = os.path.splitext(os.path.basename(__file__))[0]
#   config_file = mypath + '/' + config_file_prefix + '.json'

# Load config
with open(config_file, "r") as cfg:
    config = loads(cfg.read())

debug_level_old = debug_level
debug_level = str(
    replace_all_placeholders("{%s/debug_level}" % (config_context), config, "")
)
if debug_level != debug_level_old:
    if debug_level == "DEBUG":
        logging.getLogger().setLevel(logging.DEBUG)
    elif debug_level == "INFO":
        logging.getLogger().setLevel(logging.INFO)
    elif debug_level == "WARNING":
        logging.getLogger().setLevel(logging.WARNING)
    elif debug_level == "ERROR":
        logging.getLogger().setLevel(logging.ERROR)
    elif debug_level == "CRITICAL":
        logging.getLogger().setLevel(logging.CRITICAL)
    else:
        logging.getLogger().setLevel(logging.INFO)
    logging.info("debug level set dynamically to: %s", debug_level)

logging.debug("%s: config file '%s'", event_type, config_file)

# read config settings
# clone_dir = config.get('clone_dir', "git")
clone_dir = replace_all_placeholders("{%s/clone_dir}" % (config_context), config, "")
logging.debug("config read - 'clone_dir': %s", event_type, clone_dir)
create_dir = replace_all_placeholders("{%s/create_dir}" % (config_context), config, 1)
logging.debug("config read - 'create_dir': %s", (create_dir))
# git_url = config.get('git_url', "{repository/html_url}")
git_url = replace_all_placeholders("{%s/git_url}" % (config_context), config, "")
logging.debug("config read - 'git_url': %s", git_url)

# get event payload
with open(json_file, "r") as jsf:
    payload = json.loads(jsf.read())

# repleace placeholder from config to real github html url
git_url = replace_all_placeholders(git_url, payload, event_type)

# try to create dir
if not os.path.exists(clone_dir):
    if create_dir == "1":
        try:
            os.mkdir(clone_dir)
            logging.debug("Directory '%s' created successfully." % clone_dir)
        except OSError:
            logging.error("Directory '%s' could not be created." % clone_dir)

# check if dir exists (before or after creation)
if os.path.isdir(clone_dir):
    # clone only public repositories
    if replace_all_placeholders("{repository/private}", payload, event_type) == "False":
        # clone repository as useable file structure
        clone_dir = clone_dir + "/" + timestamp + "/"

        try:
            os.mkdir(clone_dir)
            logging.debug("Directory '%s' created successfully." % clone_dir)
        except Exception:
            logging.error("Directory '%s' could not be created." % clone_dir)

        logging.info("Cloning reposirtory: %s", git_url)
        logging.info("Cloning to dir: %s", clone_dir)
        try:
            git.Git(clone_dir).clone(git_url)
        except Exception:
            logging.error("Remote repository could not be cloned. Abort.")
    else:
        logging.error("Remote repository is not public. Abort.")
else:
    logging.error("Clone base dir not existing (%s). Abort.", clone_dir)
